# Methane Kit CI configuration for Sonar Cloud static code analysis on Windows platform
# https://aka.ms/yaml

steps:

  - script: mkdir $(buildDir)
    displayName: 'Make build directories for $(platform) $(configuration)'

  - task: CMake@1
    displayName: 'Generate with $(generatorName) for $(platform) $(configuration)'
    inputs:
      workingDirectory: $(buildDir)
      cmakeArgs: '-G $(generatorName) $(cmakeFlags) $(rootDir)'

  - powershell: |
      Invoke-WebRequest -Uri '$(sonarBuildWrapperUrl)' -OutFile 'build-wrapper.zip'
      Expand-Archive -Path 'build-wrapper.zip' -DestinationPath '.'
    workingDirectory: $(buildDir)
    displayName: 'Download and unpack Sonar Build-Wrapper'

  - powershell: |
      Expand-Archive -Path 'OpenCppCoverage.zip' -DestinationPath '.'
    workingDirectory: Externals\Tools
    displayName: 'Unpack OpenCppCoverage tool'

  - task: Cache@2
    displayName: 'Sonar Scanner Cache'
    inputs:
      key: 'SonarCache | $(sonarProjectKey) | $(Build.SourceBranchName) | $(configuration) | $(platform) | "$(Agent.OS)"'
      path: $(sonarCacheDir)

  - task: SonarCloudPrepare@1
    displayName: 'Prepare Sonar Cloud Scanner'
    inputs:
      SonarCloud: 'Evgeny Gorodetsky Sonar Cloud'
      organization: 'egorodet-github'
      scannerMode: 'CLI'
      configMode: 'manual'
      cliProjectKey: $(sonarProjectKey)
      cliProjectVersion: $(productFullVersion)
      cliSources: 'Apps,Modules'
      extraProperties: |
        sonar.branch.name=$(Build.SourceBranchName)
        sonar.cfamily.build-wrapper-output=$(buildDir)\BuildWrapperOutput
        sonar.cfamily.cache.path=$(sonarCacheDir)
        sonar.cfamily.cache.enabled=true
        sonar.cfamily.threads=4
        sonar.junit.reportPaths=$(installDir)\Tests\Result\Junit.xml
        sonar.flex.cobertura.reportPaths=$(installDir)\Tests\Coverage\Cobertura.xml

  - script: |
      call "$(vcVarsBatFile)"
      $(sonarBuildWrapperExe) --out-dir BuildWrapperOutput $(sonarBuildCommand)
    workingDirectory: $(buildDir)
    displayName: 'Build under Sonar Build-Wrapper with $(generatorName) for $(platform) $(configuration)'

  - script: |
      setlocal enabledelayedexpansion
      echo Running unit-tests in directory "%cd%"
      for /r "." %%a in (*Test.exe) do (
        "..\$(rootDir)\Externals\Tools\OpenCppCoverage\OpenCppCoverage.exe" --sources "$(Build.SourcesDirectory)\Modules" --export_type=cobertura:%%~fa_coverage.xml -- "%%~fa" -r junit -o "%%~fa_result.xml"
        echo  - %%~na - completed with !errorlevel! exit status
      )
      exit 0
    workingDirectory: '$(installDir)\Tests'
    failOnStderr: false
    displayName: 'Collect code coverage from all unit-tests in install directory'

  - task: reportgenerator@4
    displayName: 'Merge per-test results into one report'
    inputs:
      reports: '$(installDir)\Tests\*_result.xml'
      targetdir: '$(installDir)\Tests\Result'

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**\*_result.xml'
      searchFolder: '$(installDir)\Tests'
      mergeTestResults: true
      failTaskOnFailedTests: true
      buildPlatform: $(platform)
      buildConfiguration: $(configuration)
      testRunTitle: 'Methane Tests $(platform) $(configuration)'

  - task: reportgenerator@4
    displayName: 'Merge per-test code coverage results into one report'
    inputs:
      reports: '$(installDir)\Tests\*_coverage.xml'
      targetdir: '$(installDir)\Tests\Coverage'

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: '$(installDir)\Tests\Coverage\Cobertura.xml'
      pathToSources: '$(Build.SourcesDirectory)\Modules'
    continueOnError: true

  - task: SonarCloudAnalyze@1
    displayName: 'Analyze built sources with Sonar Scanner'

  - task: SonarCloudPublish@1
    displayName: 'Publish results of analysis to Sonar Cloud'
    inputs:
      pollingTimeoutSec: '300'
