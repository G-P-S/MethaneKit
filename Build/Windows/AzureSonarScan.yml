# Methane Kit CI configuration for Sonar Cloud static code analysis on Windows platform
# https://aka.ms/yaml

steps:

  - task: CMake@1
    displayName: 'Generate with configuration preset $(cmake.ConfigurePreset)'
    inputs:
      workingDirectory: $(Build.SourcesDirectory)
      cmakeArgs: '--preset $(cmake.ConfigurePreset) $(cmake.ConfigureFlags)'

  - powershell: |
      Invoke-WebRequest -Uri '$(sonar.BuildWrapperUrl)' -OutFile 'build-wrapper.zip'
      Expand-Archive -Path 'build-wrapper.zip' -DestinationPath '.'
    workingDirectory: $(buildDir)
    displayName: 'Download and unpack Sonar Build-Wrapper'

  - task: Cache@2
    displayName: 'Initialize Sonar Scanner Cache'
    inputs:
      key: 'SonarCache | $(sonar.ProjectKey) | $(Build.SourceBranchName) | $(cmake.ConfigurePreset) | "$(sonar.ScannerVersion)"'
      path: $(sonar.CacheDir)

  - task: Cache@2
    displayName: 'Initialize Externals Cache'
    inputs:
      key: 'ExternalsCache | $(cmake.ConfigurePreset) | Externals/*.cmake'
      path: '$(cmake.ExternalsCacheDir)'

  - task: SonarCloudPrepare@1
    displayName: 'Prepare Sonar Cloud Scanner'
    inputs:
      SonarCloud: $(sonar.CloudName)
      organization: $(sonar.Organization)
      scannerMode: 'CLI'
      configMode: 'manual'
      cliProjectKey: $(sonar.ProjectKey)
      cliProjectVersion: $(product.Version.Full)
      cliSources: $(sonar.Sources)
      cliTests:
      extraProperties: |
        sonar.tests=$(sonar.Tests)
        sonar.cfamily.build-wrapper-output=$(buildDir)\BuildWrapperOutput
        sonar.cfamily.cache.path=$(sonar.CacheDir)
        sonar.cfamily.cache.enabled=true
        sonar.cfamily.threads=4
        sonar.testExecutionReportPaths=$(installDir)\Tests\Results\MethaneDataTypesTest.xml,$(installDir)\Tests\Results\MethaneDataEventsTest.xml,$(installDir)\Tests\Results\MethaneDataRangeSetTest.xml,$(installDir)\Tests\Results\MethanePlatformInputTest.xml,$(installDir)\Tests\Results\MethaneGraphicsTypesTest.xml,$(installDir)\Tests\Results\MethaneGraphicsCameraTest.xml,$(installDir)\Tests\Results\MethaneUserInterfaceTypesTest.xml
        sonar.coverageReportPaths=$(installDir)\Tests\Coverage\Report\SonarQube.xml
        sonar.verbose=$(sonar.Verbose)

  - script: |
      $(buildDir)\$(sonar.BuildWrapperExe) --out-dir $(buildDir)\BuildWrapperOutput cmake --build --preset $(cmake.BuildPreset) --target install
    workingDirectory: $(Build.SourcesDirectory)
    displayName: 'Build under Sonar Build-Wrapper with $(cmake.BuildPreset)'

  - powershell: |
      Invoke-WebRequest -Uri '$(coverage.OpenCppCoverageUrl)' -OutFile 'OpenCppCoverage.zip'
      Expand-Archive -Path 'OpenCppCoverage.zip' -DestinationPath 'OpenCppCoverage'
      if (-not(Test-Path -Path 'OpenCppCoverage\OpenCppCoverage.exe' -PathType Leaf)) {
        Get-ChildItem 'OpenCppCoverage'
        throw 'OpenCppCoverage\OpenCppCoverage.exe executable was not found in unpacked content!'
      }
    workingDirectory: '$(installDir)\Tests'
    displayName: 'Download and unpack OpenCppCoverage tool'

  - script: |
      setlocal enabledelayedexpansion
      set open_cpp_coverage_exe="OpenCppCoverage\OpenCppCoverage.exe"
      if not exist "%open_cpp_coverage_exe%" (
        echo File path "%open_cpp_coverage_exe%" does not exist!
        exit 101
      )
      echo Running unit-tests in directory "%cd%"
      mkdir Results
      mkdir Coverage
      set /A result_error_level=0
      for /r "." %%a in (*Test.exe) do (
        echo "%open_cpp_coverage_exe%" --sources "$(Build.SourcesDirectory)\Modules" --export_type=cobertura:Coverage\%%~na.xml -- "%%~fa" -r sonarqube -o "Results\%%~na.xml"
        "%open_cpp_coverage_exe%" --sources "$(Build.SourcesDirectory)\Modules" --export_type=cobertura:Coverage\%%~na.xml -- "%%~fa" -r sonarqube -o "Results\%%~na.xml"
        echo  - %%~na - completed with !errorlevel! exit status
        if not !errorlevel!==0 (
          set /A result_error_level=!errorlevel!
        )
      )
      exit !result_error_level!
    workingDirectory: '$(installDir)\Tests'
    failOnStderr: false
    displayName: 'Collect code coverage from all unit-tests in install directory'

  - task: reportgenerator@5
    displayName: 'Generate SonarCube and Cobertura code coverage reports'
    inputs:
      reports: '$(installDir)\Tests\Coverage\*.xml'
      targetdir: '$(installDir)\Tests\Coverage\Report'
      reporttypes: 'Cobertura;SonarQube'
      title: 'Methane Tests Code Coverage for $(cmake.BuildPreset)'
      tag: '$(product.Version.Full)'

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish Cobertura code coverage report to Azure Pipelines'
    inputs:
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: '$(installDir)\Tests\Coverage\Report\Cobertura.xml'
      pathToSources: '$(Build.SourcesDirectory)\Modules'

  - task: SonarCloudAnalyze@1
    displayName: 'Analyze built sources with Sonar Scanner'

  - task: SonarCloudPublish@1
    displayName: 'Publish results of analysis to Sonar Cloud'
    inputs:
      pollingTimeoutSec: '300'

  - task: CopyFiles@2
    displayName: 'Copy Sonar Scanner error reproducers to staging directory'
    condition: failed()
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)'
      Contents: 'sonar-*-reproducer.zip'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishPipelineArtifact@0
    displayName: 'Publish sonar error reproduces to build artifacts'
    condition: failed()
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)'
      archiveFilePatterns: '*.zip'
      artifactName: MethaneKit_$(cmake.BuildPreset)_Errors_$(product.Version.Full)
