# Methane Kit CI configuration for Sonar Cloud static code analysis on MacOS/Linux platform
# https://aka.ms/yaml

steps:

  - script: |
      mkdir -p $(buildDir)
    displayName: 'Make build directories for $(platform) $(configuration)'

  - task: CMake@1
    displayName: 'Generate with $(generatorName) for $(platform) $(configuration)'
    inputs:
      workingDirectory: $(buildDir)
      cmakeArgs: '-G $(generatorName) -DCMAKE_BUILD_TYPE=$(configuration) -DCMAKE_INSTALL_PREFIX:PATH=$(buildInstallDir) $(cmakeFlags) $(rootDir)'

  - script: |
      curl '$(sonar.BuildWrapperUrl)' --output build-wrapper.zip
      unzip build-wrapper.zip
    workingDirectory: $(buildDir)
    displayName: 'Download and unpack Sonar Build-Wrapper'

  - task: Cache@2
    displayName: 'Sonar Scanner Cache'
    inputs:
      key: 'SonarCache | $(sonar.ProjectKey) | $(Build.SourceBranchName) | $(configuration) | $(platform) | "$(Agent.OS)"'
      path: $(sonar.CacheDir)

  - task: SonarCloudPrepare@1
    displayName: 'Prepare Sonar Cloud Scanner'
    inputs:
      SonarCloud: $(sonar.CloudName)
      organization: $(sonar.Organization)
      scannerMode: 'CLI'
      configMode: 'manual'
      cliProjectKey: $(sonar.ProjectKey)
      cliProjectVersion: $(product.Version.Full)
      cliSources: $(sonar.Sources)
      extraProperties: |
        sonar.branch.name=$(Build.SourceBranchName)
        sonar.tests=$(sonar.Tests)
        sonar.cfamily.build-wrapper-output=$(buildDir)/BuildWrapperOutput
        sonar.cfamily.cache.path=$(sonar.CacheDir)
        sonar.cfamily.cache.enabled=true
        sonar.cfamily.threads=4
        sonar.testExecutionReportPaths=$(installDir)/Tests/Results/MethaneDataEventsTest.xml,$(installDir)/Tests/Results/MethaneDataRangeSetTest.xml,$(installDir)/Tests/Results/MethanePlatformInputTest.xml,$(installDir)/Tests/Results/MethaneGraphicsCameraTest.xml
        sonar.coverageReportPaths=$(installDir)/Tests/Coverage/Report/SonarQube.xml

  - script: |
      $(sonar.BuildWrapperExe) --out-dir BuildWrapperOutput $(sonar.BuildCommand)
    workingDirectory: $(buildDir)
    displayName: 'Build under Sonar Build-Wrapper with $(generatorName) for $(platform) $(configuration)'

  - bash: |
      result_ext='.xml'
      echo Running unit-tests in directory $PWD
      mkdir Results
      for test_exe in *Test
      do
        ./$test_exe -r sonarqube -o "Results/$test_exe$result_ext"
        echo  - $test_exe - completed with $? exit status
        mv default.profraw $test_exe.profraw
      done
    workingDirectory: '$(installDir)/Tests'
    displayName: 'Collect code coverage from all unit-tests in install directory'

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: 'Results/*.xml'
      searchFolder: '$(installDir)/Tests'
      mergeTestResults: true
      failTaskOnFailedTests: true
      buildPlatform: $(platform)
      buildConfiguration: $(configuration)
      testRunTitle: 'Methane Tests $(platform) $(configuration)'

  - bash: |
      prof_data_ext='.profdata'
      prof_raw_ext='.profraw'
      coverage_ext='.txt'
      mkdir Coverage
      for test_exe in *Test
      do
        if [ ! -f "$test_exe$prof_raw_ext" ]; then
          continue
        fi
        echo  - Convert code coverage from "$test_exe$prof_raw_ext" to lcov text format
        xcrun llvm-profdata merge -o "$test_exe$prof_data_ext" "$test_exe$prof_raw_ext"
        xcrun llvm-cov show ./$test_exe -instr-profile="$test_exe$prof_data_ext" > "Coverage/$test_exe$coverage_ext"
      done
    workingDirectory: '$(installDir)/Tests'
    condition: eq( variables['Agent.OS'], 'Darwin' )
    displayName: 'Convert LLVM code coverage data to lcov text format on MacOS'

  - task: reportgenerator@4
    displayName: 'Merge per-test code coverage results into one report'
    inputs:
      ${{ if eq( variables['Agent.OS'], 'Darwin' ) }}:
        reports: '$(installDir)/Tests/Coverage/*.txt'
      ${{ if eq( variables['Agent.OS'], 'Linux' ) }}:
        reports: '$(installDir)/Tests/*.gcov'
      targetdir: '$(installDir)/Tests/Coverage/Report'
      reporttypes: 'Cobertura;SonarQube'
      tag: '$(product.Version.Full)'

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: '$(installDir)/Tests/Coverage/Report/Cobertura.xml'
      pathToSources: '$(Build.SourcesDirectory)/Modules'
    continueOnError: true

  - task: SonarCloudAnalyze@1
    displayName: 'Analyze built sources with Sonar Scanner'

  - task: SonarCloudPublish@1
    displayName: 'Publish results of analysis to Sonar Cloud'
    inputs:
      pollingTimeoutSec: '300'