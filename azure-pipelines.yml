# Methane Kit CI configuration
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - master
    - develop
  paths:
    exclude:
    - .github/**
    - .idea/**
    - .vscode/**
    - .gitpod.yml
    - Docs/**
    - Build/Windows/Build.bat
    - Build/Unix/Build.sh
    - README.md
    - SECURITY.md
    - LICENSE

pr:
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md
    - LICENSE

resources:
  repositories:
  - repository: self
    checkoutOptions:
      submodules: recursive

variables:

  product.Version.Major: 0
  product.Version.Minor: 6
  product.Version.Full: '$(product.Version.Major).$(product.Version.Minor).$(Build.BuildNumber)'

  sonar.CloudName: 'Evgeny Gorodetsky Sonar Cloud'
  sonar.Organization: 'egorodet-github'
  sonar.Sources: 'Apps,Modules'
  sonar.Tests: 'Tests'
  sonar.CacheDir: '$(Pipeline.Workspace)/SonarCache'
  sonar.ScannerVersion: '4.4.0.2170'

  cmake.ConfigureFlags: '-DMETHANE_VERSION_MAJOR=$(product.Version.Major)
    -DMETHANE_VERSION_MINOR=$(product.Version.Minor)
    -DMETHANE_VERSION_BUILD=$(Build.BuildNumber)'

jobs:

- job: Win64_DX_Release

  pool:
    vmImage: 'windows-2019'

  variables:
    cmake.ConfigurePreset: 'VS2019-Win64-DX-Default'
    cmake.BuildPreset: 'VS2019-Win64-DX-Release'
    installDir: 'Build\Output\$(cmake.ConfigurePreset)\Install'

  steps:
  - template: Build/Windows/AzureBuild.yml

- job: Win64_DX_Profiling

  pool:
    vmImage: 'windows-2019'

  variables:
    cmake.ConfigurePreset: 'VS2019-Win64-DX-Profile'
    cmake.BuildPreset: 'VS2019-Win64-DX-Profile'
    installDir: 'Build\Output\$(cmake.ConfigurePreset)\Install'

  steps:
  - template: Build/Windows/AzureBuild.yml
    parameters:
      runTests: false

- job: Win32_DX_Release

  pool:
    vmImage: 'windows-2019'

  variables:
    cmake.ConfigurePreset: 'VS2019-Win32-DX-Default'
    cmake.BuildPreset: 'VS2019-Win32-DX-Release'
    installDir: 'Build\Output\$(cmake.ConfigurePreset)\Install'

  steps:
  - template: Build/Windows/AzureBuild.yml

- job: Win32_DX_Profiling

  pool:
    vmImage: 'windows-2019'

  variables:
    cmake.ConfigurePreset: 'VS2019-Win32-DX-Profile'
    cmake.BuildPreset: 'VS2019-Win32-DX-Profile'
    installDir: 'Build\Output\$(cmake.ConfigurePreset)\Install'

  steps:
  - template: Build/Windows/AzureBuild.yml
    parameters:
      runTests: false

- job: Win64_VK_Release

  pool:
    vmImage: 'windows-2019'

  variables:
    cmake.ConfigurePreset: 'VS2019-Win64-VK-Default'
    cmake.BuildPreset: 'VS2019-Win64-VK-Release'
    installDir: 'Build\Output\$(cmake.ConfigurePreset)\Install'

  steps:
    - template: Build/Windows/AzureBuild.yml
      parameters:
        runTests: false

- job: Win64_VK_Profiling

  pool:
    vmImage: 'windows-2019'

  variables:
    cmake.ConfigurePreset: 'VS2019-Win64-VK-Profile'
    cmake.BuildPreset: 'VS2019-Win64-VK-Profile'
    installDir: 'Build\Output\$(cmake.ConfigurePreset)\Install'

  steps:
    - template: Build/Windows/AzureBuild.yml
      parameters:
        runTests: false

- job: Win32_VK_Release

  pool:
    vmImage: 'windows-2019'

  variables:
    cmake.ConfigurePreset: 'VS2019-Win32-VK-Default'
    cmake.BuildPreset: 'VS2019-Win32-VK-Release'
    installDir: 'Build\Output\$(cmake.ConfigurePreset)\Install'

  steps:
    - template: Build/Windows/AzureBuild.yml
      parameters:
        runTests: false

- job: Win32_VK_Profiling

  pool:
    vmImage: 'windows-2019'

  variables:
    cmake.ConfigurePreset: 'VS2019-Win32-VK-Profile'
    cmake.BuildPreset: 'VS2019-Win32-VK-Profile'
    installDir: 'Build\Output\$(cmake.ConfigurePreset)\Install'

  steps:
    - template: Build/Windows/AzureBuild.yml
      parameters:
        runTests: false

- job: Win64_DX_SonarScan
  continueOnError: true

  pool:
    vmImage: 'windows-2019'

  variables:
    cmake.ConfigurePreset: 'VS2019-Win64-DX-Scan'
    cmake.BuildPreset: 'VS2019-Win64-DX-Scan'
    buildDir: 'Build\Output\$(cmake.ConfigurePreset)\Build'
    installDir: 'Build\Output\$(cmake.ConfigurePreset)\Install'
    sonar.ProjectKey: 'egorodet_MethaneKit_Windows'
    sonar.BuildWrapperUrl: 'https://sonarcloud.io/static/cpp/build-wrapper-win-x86.zip'
    sonar.BuildWrapperExe: build-wrapper-win-x86\build-wrapper-win-x86-64.exe
    sonar.Verbose: false

  steps:
    - template: Build/Windows/AzureSonarScan.yml

- job: MacOS_MTL_Release

  pool:
    vmImage: 'macOS-10.15'

  variables:
    cmake.ConfigurePreset: 'Xcode-Mac-MTL-Default'
    cmake.BuildPreset: 'Xcode-Mac-MTL-Release'
    installDir: 'Build/Output/$(cmake.ConfigurePreset)/Install'

  steps:
  - template: Build/Unix/AzureBuild.yml

- job: MacOS_MTL_Profiling

  pool:
    vmImage: 'macOS-10.15'

  variables:
    cmake.ConfigurePreset: 'Xcode-Mac-MTL-Profile'
    cmake.BuildPreset: 'Xcode-Mac-MTL-Profile'
    installDir: 'Build/Output/$(cmake.ConfigurePreset)/Install'

  steps:
  - template: Build/Unix/AzureBuild.yml
    parameters:
      runTests: false

- job: MacOS_MTL_SonarScan
  continueOnError: true

  pool:
    vmImage: 'macOS-10.15'

  variables:
    cmake.ConfigurePreset: 'Xcode-Mac-MTL-Scan'
    cmake.BuildPreset: 'Xcode-Mac-MTL-Scan'
    buildDir: 'Build/Output/$(cmake.ConfigurePreset)/Build'
    installDir: 'Build/Output/$(cmake.ConfigurePreset)/Install'
    coverageReports: '$(installDir)/Tests/Coverage/*.lcov'
    sonar.ProjectKey: 'egorodet_MethaneKit_MacOS'
    sonar.BuildWrapperUrl: 'https://sonarcloud.io/static/cpp/build-wrapper-macosx-x86.zip'
    sonar.BuildWrapperExe: build-wrapper-macosx-x86/build-wrapper-macosx-x86
    sonar.Verbose: false

  steps:
    - template: Build/Unix/AzureSonarScan.yml
      parameters:
        extraScanSteps:
          - bash: |
              result_ext='.xml'
              prof_data_ext='.profdata'
              prof_raw_ext='.profraw'
              lcov_ext='.lcov'
              echo Running unit-tests and Converting LLVM code coverage data to lcov text format in directory $PWD
              mkdir Results
              mkdir Coverage
              for test_exe in *Test
              do
                ./$test_exe -r sonarqube -o "Results/$test_exe$result_ext"
                echo  - $test_exe - completed with $? exit status
                if [ ! -f default.profraw ]; then
                  continue
                fi
                mv default.profraw "$test_exe$prof_raw_ext"
                xcrun llvm-profdata merge -o "$test_exe$prof_data_ext" "$test_exe$prof_raw_ext"
                xcrun llvm-cov export -format lcov -instr-profile="$test_exe$prof_data_ext" -arch=x86_64 ./$test_exe > "./Coverage/$test_exe$lcov_ext"
                echo    - Converted code coverage from "$test_exe$prof_raw_ext" to lcov text format "./Coverage/$test_exe$lcov_ext", $? exit status
              done
              echo List of generated coverage files in directory $PWD/Coverage
              ls -la ./Coverage
            workingDirectory: '$(installDir)/Tests'
            displayName: 'Collect code coverage from all unit-tests in install directory on MacOS'

- job: Ubuntu_VK_Release

  pool:
    vmImage: 'ubuntu-20.04'

  variables:
    cmake.ConfigurePreset: 'Make-Lin-VK-Default'
    cmake.BuildPreset: 'Make-Lin-VK-Release'
    installDir: 'Build/Output/$(cmake.ConfigurePreset)/Install'

  steps:
  - template: Build/Unix/AzureBuild.yml
    parameters:
      extraInitSteps:
        - bash: |
            sudo apt-get update
            sudo apt-get -y install xcb libx11-dev libx11-xcb-dev
          displayName: 'Install prerequisite packages on Linux'

- job: Ubuntu_VK_Profiling

  pool:
    vmImage: 'ubuntu-20.04'

  variables:
    cmake.ConfigurePreset: 'Make-Lin-VK-Profile'
    cmake.BuildPreset: 'Make-Lin-VK-Profile'
    installDir: 'Build/Output/$(cmake.ConfigurePreset)/Install'

  steps:
  - template: Build/Unix/AzureBuild.yml
    parameters:
      runTests: false
      extraInitSteps:
        - bash: |
            sudo apt-get update
            sudo apt-get -y install xcb libx11-dev libx11-xcb-dev
          displayName: 'Install prerequisite packages on Linux'

- job: Ubuntu_VK_SonarScan
  continueOnError: true

  pool:
    vmImage: 'ubuntu-20.04'

  variables:
    cmake.ConfigurePreset: 'Make-Lin-VK-Scan'
    cmake.BuildPreset: 'Make-Lin-VK-Scan'
    buildDir: 'Build/Output/$(cmake.ConfigurePreset)/Build'
    installDir: 'Build/Output/$(cmake.ConfigurePreset)/Install'
    coverageReports: '$(buildDir)/MethaneTestCoverage.info'
    sonar.ProjectKey: 'egorodet_MethaneKit_Linux'
    sonar.BuildWrapperUrl: 'https://sonarcloud.io/static/cpp/build-wrapper-linux-x86.zip'
    sonar.BuildWrapperExe: build-wrapper-linux-x86/build-wrapper-linux-x86-64
    sonar.Verbose: false

  steps:
    - template: Build/Unix/AzureSonarScan.yml
      parameters:
        extraInitSteps:
          - bash: |
              sudo apt-get update
              sudo apt-get -y install lcov xcb libx11-dev libx11-xcb-dev
            displayName: 'Install prerequisite packages on Linux'
        extraScanSteps:
          - bash: |
              result_ext='.xml'
              echo Running unit-tests in directory $PWD
              mkdir Results
              for test_exe in *Test
              do
                ./$test_exe -r sonarqube -o "Results/$test_exe$result_ext"
                echo  - $test_exe - completed with $? exit status
              done
            workingDirectory: '$(installDir)/Tests'
            displayName: 'Run all unit-tests from install directory'
          - bash: |
              make MethaneTestCoverage
            workingDirectory: '$(buildDir)'
            displayName: 'Collect tests code coverage using ctest and gcov/lcov on Linux'
