# Methane Kit CI configuration
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - master
    - develop
  paths:
    exclude:
    - Build/Windows/Build.bat
    - Build/Posix/Build.sh
    - CMakeSettings.json
    - Folder.DotSettings
    - README.md
    - LICENSE

pr:
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md
    - LICENSE
    - CMakeSettings.json

resources:
  repositories:
  - repository: self
    checkoutOptions:
      submodules: recursive

variables:

  productMajorVersion: 0
  productMinorVersion: 5

  buildReleaseCmakeFlags: '-DMETHANE_VERSION_MAJOR=$(productMajorVersion)
    -DMETHANE_VERSION_MINOR=$(productMinorVersion)
    -DMETHANE_VERSION_BUILD=$(Build.BuildNumber)
    -DMETHANE_SHADERS_CODEVIEW_ENABLED:BOOL=ON
    -DMETHANE_RUN_TESTS_DURING_BUILD:BOOL=OFF
    -DMETHANE_COMMAND_DEBUG_GROUPS_ENABLED:BOOL=ON
    -DMETHANE_LOGGING_ENABLED:BOOL=OFF
    -DMETHANE_USE_OPEN_IMAGE_IO:BOOL=OFF
    -DMETHANE_SCOPE_TIMERS_ENABLED:BOOL=OFF
    -DMETHANE_ITT_INSTRUMENTATION_ENABLED:BOOL=ON
    -DMETHANE_ITT_METADATA_ENABLED:BOOL=OFF
    -DMETHANE_GPU_INSTRUMENTATION_ENABLED:BOOL=OFF
    -DMETHANE_TRACY_PROFILING_ENABLED:BOOL=OFF
    -DMETHANE_TRACY_PROFILING_ON_DEMAND:BOOL=OFF'

  buildProfilingCmakeFlags: '-DMETHANE_VERSION_BUILD=$(Build.BuildNumber)
    -DMETHANE_SHADERS_CODEVIEW_ENABLED:BOOL=ON
    -DMETHANE_RUN_TESTS_DURING_BUILD:BOOL=OFF
    -DMETHANE_COMMAND_DEBUG_GROUPS_ENABLED:BOOL=ON
    -DMETHANE_LOGGING_ENABLED:BOOL=OFF
    -DMETHANE_USE_OPEN_IMAGE_IO:BOOL=OFF
    -DMETHANE_SCOPE_TIMERS_ENABLED:BOOL=ON
    -DMETHANE_ITT_INSTRUMENTATION_ENABLED:BOOL=ON
    -DMETHANE_ITT_METADATA_ENABLED:BOOL=ON
    -DMETHANE_GPU_INSTRUMENTATION_ENABLED:BOOL=ON
    -DMETHANE_TRACY_PROFILING_ENABLED:BOOL=ON
    -DMETHANE_TRACY_PROFILING_ON_DEMAND:BOOL=ON'

jobs:

- job: Windows_x64

  pool:
    vmImage: 'windows-2019'

  variables:
    platform: 'Win64'
    configuration: 'Release'
    generatorName: '"Visual Studio 16 2019"'
    cmakeFlags: -A x64 $(buildReleaseCmakeFlags)
    buildName: '$(platform)-$(configuration)'
    buildDir: 'Build\Output\$(buildName)\Build'
    installDir: 'Build\Output\$(buildName)\Install'
    buildInstallDir: '..\Install'
    rootDir: '..\..\..\..'
    productFullVersion: '$(productMajorVersion).$(productMinorVersion).$(Build.BuildNumber)'

  steps:
  - template: Build/Windows/AzureBuild.yml

- job: Windows_x64_Profiling

  pool:
    vmImage: 'windows-2019'

  variables:
    platform: 'Win64'
    configuration: 'RelWithDebInfo'
    generatorName: '"Visual Studio 16 2019"'
    cmakeFlags: -A x64 $(buildProfilingCmakeFlags)
    buildName: '$(platform)-$(configuration)-Profiling'
    buildDir: 'Build\Output\$(buildName)\Build'
    installDir: 'Build\Output\$(buildName)\Install'
    buildInstallDir: '..\Install'
    rootDir: '..\..\..\..'
    productFullVersion: '$(productMajorVersion).$(productMinorVersion).$(Build.BuildNumber)'

  steps:
  - template: Build/Windows/AzureBuild.yml

- job: Windows_x86

  pool:
    vmImage: 'windows-2019'

  variables:
    platform: 'Win32'
    configuration: 'Release'
    generatorName: '"Visual Studio 16 2019"'
    cmakeFlags: -A Win32 $(buildReleaseCmakeFlags)
    buildName: '$(platform)-$(configuration)'
    buildDir: 'Build\Output\$(buildName)\Build'
    installDir: 'Build\Output\$(buildName)\Install'
    buildInstallDir: '..\Install'
    rootDir: '..\..\..\..'
    productFullVersion: '$(productMajorVersion).$(productMinorVersion).$(Build.BuildNumber)'

  steps:
  - template: Build/Windows/AzureBuild.yml

- job: Windows_x86_Profiling

  pool:
    vmImage: 'windows-2019'

  variables:
    platform: 'Win32'
    configuration: 'RelWithDebInfo'
    generatorName: '"Visual Studio 16 2019"'
    cmakeFlags: -A Win32 $(buildProfilingCmakeFlags)
    buildName: '$(platform)-$(configuration)-Profiling'
    buildDir: 'Build\Output\$(buildName)\Build'
    installDir: 'Build\Output\$(buildName)\Install'
    buildInstallDir: '..\Install'
    rootDir: '..\..\..\..'
    productFullVersion: '$(productMajorVersion).$(productMinorVersion).$(Build.BuildNumber)'

  steps:
  - template: Build/Windows/AzureBuild.yml

- job: Windows_Sonar_Scan

  pool:
    vmImage: 'windows-2019'

  variables:
    platform: 'x64'
    configuration: 'Debug'
    generatorName: '"Visual Studio 16 2019"'
    cmakeFlags: -A x64 -DCMAKE_INSTALL_PREFIX:PATH=..\Install $(buildReleaseCmakeFlags)
    buildName: '$(platform)-$(configuration)-SonarScan'
    buildDir: 'Build\Output\$(buildName)\Build'
    installDir: 'Build\Output\$(buildName)\Install'
    rootDir: '..\..\..\..'
    vcVarsBatFile: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat'
    productFullVersion: '$(productMajorVersion).$(productMinorVersion).$(Build.BuildNumber)'
    sonarCacheDir: '$(Pipeline.Workspace)\WindowsSonarCache'
    sonarBuildWrapperUrl: 'https://sonarcloud.io/static/cpp/build-wrapper-win-x86.zip'
    sonarBuildWrapperExe: build-wrapper-win-x86\build-wrapper-win-x86-64.exe
    sonarBuildCommand: MSBuild.exe MethaneKit.sln /t:INSTALL /p:Configuration=$(configuration) /p:Platform=$(platform) /t:Rebuild
    sonarProjectKey: 'egorodet_MethaneKit_Windows'

  steps:
    - template: Build/Windows/AzureSonarScan.yml

- job: MacOS

  pool:
    vmImage: 'macOS-10.14'

  variables:
    platform: 'MacOS'
    configuration: 'Release'
    generatorName: 'Xcode'
    cmakeFlags: $(buildReleaseCmakeFlags)
    buildName: '$(platform)-$(configuration)'
    buildDir: 'Build/Output/$(buildName)/Build'
    installDir: 'Build/Output/$(buildName)/Install'
    buildInstallDir: '../Install'
    rootDir: '../../../..'
    productFullVersion: '$(productMajorVersion).$(productMinorVersion).$(Build.BuildNumber)'

  steps:
  - template: Build/Posix/AzureBuild.yml

- job: MacOS_Profiling

  pool:
    vmImage: 'macOS-10.14'

  variables:
    platform: 'MacOS'
    configuration: 'RelWithDebInfo'
    generatorName: 'Xcode'
    cmakeFlags: $(buildProfilingCmakeFlags)
    buildName: '$(platform)-$(configuration)-Profiling'
    buildDir: 'Build/Output/$(buildName)/Build'
    installDir: 'Build/Output/$(buildName)/Install'
    buildInstallDir: '../Install'
    rootDir: '../../../..'
    productFullVersion: '$(productMajorVersion).$(productMinorVersion).$(Build.BuildNumber)'

  steps:
  - template: Build/Posix/AzureBuild.yml

- job: MacOS_Sonar_Scan

  pool:
    vmImage: 'macOS-10.14'

  variables:
    platform: 'MacOS'
    configuration: 'Debug'
    generatorName: 'Xcode'
    cmakeFlags: $(buildReleaseCmakeFlags)
    buildName: '$(platform)-$(configuration)-SonarScan'
    buildDir: 'Build/Output/$(buildName)/Build'
    rootDir: '../../../..'
    productFullVersion: '$(productMajorVersion).$(productMinorVersion).$(Build.BuildNumber)'
    sonarCacheDir: '$(Pipeline.Workspace)/MacSonarCache'
    sonarBuildWrapperUrl: 'https://sonarcloud.io/static/cpp/build-wrapper-macosx-x86.zip'
    sonarBuildWrapperExe: build-wrapper-macosx-x86/build-wrapper-macosx-x86
    sonarBuildCommand: xcodebuild -project MethaneKit.xcodeproj -configuration $(configuration) clean build
    sonarProjectKey: 'egorodet_MethaneKit_MacOS'

  steps:
    - template: Build/Posix/AzureSonarScan.yml

- job: Ubuntu

  pool:
    vmImage: 'ubuntu-18.04'

  variables:
    platform: 'Ubuntu'
    configuration: 'Release'
    generatorName: '"Unix Makefiles"'
    cmakeFlags: $(buildReleaseCmakeFlags)
    buildName: '$(platform)-$(configuration)'
    buildDir: 'Build/Output/$(buildName)/Build'
    installDir: 'Build/Output/$(buildName)/Install'
    buildInstallDir: '../Install'
    rootDir: '../../../..'
    productFullVersion: '$(productMajorVersion).$(productMinorVersion).$(Build.BuildNumber)'

  steps:
  - template: Build/Posix/AzureBuild.yml

- job: Ubuntu_Sonar_Scan

  pool:
    vmImage: 'ubuntu-18.04'

  variables:
    platform: 'Ubuntu'
    configuration: 'Debug'
    generatorName: '"Unix Makefiles"'
    cmakeFlags: $(buildReleaseCmakeFlags)
    buildName: '$(platform)-$(configuration)-SonarScan'
    buildDir: 'Build/Output/$(buildName)/Build'
    rootDir: '../../../..'
    productFullVersion: '$(productMajorVersion).$(productMinorVersion).$(Build.BuildNumber)'
    sonarCacheDir: '$(Pipeline.Workspace)/LinuxSonarCache'
    sonarBuildWrapperUrl: 'https://sonarcloud.io/static/cpp/build-wrapper-linux-x86.zip'
    sonarBuildWrapperExe: build-wrapper-linux-x86/build-wrapper-linux-x86-64
    sonarBuildCommand: make clean all
    sonarProjectKey: 'egorodet_MethaneKit_Linux'

  steps:
    - template: Build/Posix/AzureSonarScan.yml