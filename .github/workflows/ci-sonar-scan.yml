# Static code analysis workflow for Sonar Cloud, results are published to projects:
#   - Windows: https://sonarcloud.io/project/overview?id=methane-powered-kit-windows
#   - Linux: https://sonarcloud.io/project/overview?id=methane-powered-kit-linux
#   - MacOS: https://sonarcloud.io/project/overview?id=methane-powered-kit-macos

name: 'CI Sonar Scan'

on:
  push:
    branches: [ master, develop ]
    paths:
      - '.github/**/*sonar*.yml'
      - 'Apps/**'
      - 'Modules/**'
      - 'Externals/**'
      - 'CMake/**'
      - 'CMakeLists.txt'
      - 'CMakePresets.json'
  pull_request:
    branches: [ master ]
    types: [opened, synchronize, reopened]
    paths:
      - '.github/**/*sonar*.yml'
      - 'Apps/**'
      - 'Modules/**'
      - 'Externals/**'
      - 'CMake/**'
      - 'CMakeLists.txt'
      - 'CMakePresets.json'

env:
  product_ver_major: 0
  product_ver_minor: 7
  product_ver_patch: 0
  product_ver_build: ${{ github.run_number }}
  # Find the latest sonar-scanner version here: https://docs.sonarcloud.io/advanced-setup/ci-based-analysis/sonarscanner-cli/
  sonar_scanner_version: 4.7.0.2747
  sonar_server_url: "https://sonarcloud.io"
  build_wrapper_out_dir: Build/Output/BuildWrapperOutput
  TRACY_NO_INVARIANT_CHECK: 1

jobs:
  sonar_scan:
    name: Sonar Scan ${{ matrix.name }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2019
            os_name: windows
            name: "Win64_DX_SonarScan"
            config_preset: "VS2019-Win64-DX-Scan"
            build_preset: "VS2019-Win64-DX-Scan"
            sonar_project_key: "methane-powered-kit-windows"
            sonar_project_token: ${{ secrets.WINDOWS_SONAR_TOKEN }}
            build_wrapper_zip: "build-wrapper-win-x86"
            build_wrapper_exe: "build-wrapper-win-x86-64"

          - os: ubuntu-latest
            os_name: linux
            os_short: linux
            name: "Ubuntu_VK_SonarScan"
            config_preset: "Make-Lin-VK-Scan"
            build_preset: "Make-Lin-VK-Scan"
            sonar_project_key: "methane-powered-kit-macos"
            sonar_project_token: ${{ secrets.LINUX_SONAR_TOKEN }}
            build_wrapper_zip: build-wrapper-linux-x86
            build_wrapper_exe: build-wrapper-linux-x86-64

          - os: macos-latest
            os_name: macosx
            os_short: macosx
            name: "MacOS_MTL_SonarScan"
            config_preset: "Xcode-Mac-MTL-Scan"
            build_preset: "Xcode-Mac-MTL-Scan"
            sonar_project_key: "methane-powered-kit-macos"
            sonar_project_token: ${{ secrets.MACOS_SONAR_TOKEN }}
            build_wrapper_zip: build-wrapper-macosx-x86
            build_wrapper_exe: build-wrapper-macosx-x86

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install Linux prerequisites
        if: ${{ matrix.os_name == 'linux' }}
        run: sudo apt install xcb libx11-dev libx11-xcb-dev libxcb-randr0-dev lcov

      - name: Install JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'zulu'

      - name: Download and set up sonar-scanner
        shell: bash
        run: |
          mkdir -p $HOME/.sonar
          curl -sSLo $HOME/.sonar/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.sonar_scanner_version }}-${{ matrix.os_name }}.zip
          unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/sonar-scanner-${{ env.sonar_scanner_version }}-${{ matrix.os_name }}/bin" >> $GITHUB_PATH

      - name: Download and set up build-wrapper
        shell: bash
        run: |
          curl -sSLo $HOME/.sonar/build-wrapper.zip ${{ env.sonar_server_url }}/static/cpp/${{ matrix.build_wrapper_zip }}.zip
          unzip -o $HOME/.sonar/build-wrapper.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/${{ matrix.build_wrapper_zip }}" >> $GITHUB_PATH

      - name: Add sonar-scanner and build-wrapper to PATH on Windows
        if: ${{ matrix.os_name == 'windows' }}
        run: |
          echo "$HOME\.sonar\sonar-scanner-${{ env.sonar_scanner_version }}-${{ matrix.os_name }}\bin" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8
          echo "$HOME\.sonar\${{ matrix.build_wrapper_zip }}" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8

      - name: Initialize Externals Cache
        uses: actions/cache@v3
        with:
          path: Build/Output/ExternalsCache
          key: ExternalsCache-${{ matrix.config_preset }}-${{ hashFiles('Externals/*.cmake') }}

      - name: Initialize Sonar Cache
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: SonarCache-${{ runner.os }}

      - name: CMake Configure Preset ${{ matrix.config_preset }}
        run: cmake --preset ${{ matrix.config_preset }} -DMETHANE_VERSION_MAJOR=${{ env.product_ver_major }} -DMETHANE_VERSION_MINOR=${{ env.product_ver_minor }} -DMETHANE_VERSION_PATCH=${{ env.product_ver_patch }} -DMETHANE_VERSION_BUILD=${{ env.product_ver_build }}

      - name: CMake Build Preset ${{ matrix.build_preset }} under Build-Wrapper
        run: |
          ${{ matrix.build_wrapper_exe }} --out-dir ${{ env.build_wrapper_out_dir }} cmake --build --preset ${{ matrix.build_preset }} --target install

      - name: Run sonar-scanner on PUSH
        if: github.event.workflow_run.event == 'push'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ matrix.sonar_project_token }}
        run: |
          sonar-scanner --define sonar.host.url="${{ env.sonar_server_url }}" --define sonar.projectKey="${{ matrix.sonar_project_key }}" --define sonar.projectVersion="${{ env.product_ver_major }}.${{ env.product_ver_minor }}.${{ env.product_ver_patch }}.${{ env.product_ver_build }}" --define sonar.cfamily.build-wrapper-output="${{ env.build_wrapper_out_dir }}" --define sonar.scm.revision=${{ github.event.workflow_run.head_sha }}

      - name: Run sonar-scanner on PULL-Request
        if: github.event.workflow_run.event != 'push'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ matrix.sonar_project_token }}
        run: |
          sonar-scanner --define sonar.host.url="${{ env.sonar_server_url }}" --define sonar.projectKey="${{ matrix.sonar_project_key }}" --define sonar.projectVersion="${{ env.product_ver_major }}.${{ env.product_ver_minor }}.${{ env.product_ver_patch }}.${{ env.product_ver_build }}" --define sonar.cfamily.build-wrapper-output="${{ env.build_wrapper_out_dir }}" --define sonar.scm.revision=${{ github.event.workflow_run.head_sha }} --define sonar.pullrequest.key=${{ steps.source-run-info.outputs.pullRequestNumber }} --define sonar.pullrequest.branch=${{ steps.source-run-info.outputs.sourceHeadBranch }} --define sonar.pullrequest.base=${{ steps.source-run-info.outputs.targetBranch }}
